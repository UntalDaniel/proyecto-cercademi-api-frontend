# Configuración del servidor Spring Boot
server.port=8082

# =============================================
# CONFIGURACIÓN DE JWT (JSON Web Token)
# =============================================
# IMPORTANTE: Cambia este secreto por una cadena larga, aleatoria y segura para producción.
# Puede ser una cadena codificada en Base64 de al menos 64 bytes.
# Para desarrollo, puedes usar algo como esto, PERO NO PARA PRODUCCIÓN.
jwt.secret=tuClaveSecretaMuyLargaYComplejaParaDesarrolloNoUsarEnProduccionJaJaJa1234567890ABCDEF
# Milisegundos para la expiración del token (ej: 24 horas = 24 * 60 * 60 * 1000)
jwt.expiration.ms=86400000

# =============================================
# CONFIGURACIÓN DE CONEXIÓN A APACHE JENA FUSEKI
# =============================================
# Cuando el backend corre DENTRO de un contenedor Docker y Fuseki en otro (definido en docker-compose.yml):
# Se usa el nombre del servicio 'fuseki' y el puerto interno del contenedor de Fuseki (generalmente 3030).
FUSEKI_QUERY_ENDPOINT=http://fuseki:3030/cercademiurentals/query
FUSEKI_UPDATE_ENDPOINT=http://fuseki:3030/cercademiurentals/update
FUSEKI_USERNAME=admin
# Asegúrate de que esta sea la contraseña correcta para tu Fuseki
FUSEKI_PASSWORD=Dwrangel23.

# --- Para ejecución LOCAL del backend (NO DENTRO DE DOCKER) ---
# Si Fuseki está corriendo en Docker y expuesto en el puerto 3333 de tu máquina host:
# FUSEKI_QUERY_ENDPOINT=http://localhost:3333/cercademiurentals/query
# FUSEKI_UPDATE_ENDPOINT=http://localhost:3333/cercademiurentals/update
# FUSEKI_USERNAME=admin
# FUSEKI_PASSWORD=Dwrangel23.

# =============================================
# CONFIGURACIÓN DE CONEXIÓN A POSTGRESQL
# =============================================
# Cuando el backend corre DENTRO de un contenedor Docker y PostgreSQL en otro (definido en docker-compose.yml):
# Se usa el nombre del servicio 'db' y el puerto interno del contenedor de PostgreSQL (5432).
# Los valores de username, password y nombre de la BD deben coincidir con los definidos en docker-compose.yml para el servicio 'db'.
spring.datasource.url=jdbc:postgresql://db:5432/cercademi_rentals_users
spring.datasource.username=cercademi_user
spring.datasource.password=cercademi_password
spring.datasource.driver-class-name=org.postgresql.Driver

# --- Para ejecución LOCAL del backend (NO DENTRO DE DOCKER) ---
# Si PostgreSQL está corriendo localmente o en Docker y expuesto en el puerto 5433 de tu máquina host:
# spring.datasource.url=jdbc:postgresql://localhost:5433/cercademi_rentals_users
# spring.datasource.username=cercademi_user # O el usuario que hayas configurado para acceso local
# spring.datasource.password=cercademi_password # O la contraseña correspondiente
# spring.datasource.driver-class-name=org.postgresql.Driver

# =============================================
# CONFIGURACIÓN DE JPA Y HIBERNATE
# =============================================
# 'update': Hibernate actualiza el esquema si es necesario (bueno para desarrollo).
# 'validate': Hibernate valida que el esquema coincida con las entidades (bueno para producción con migraciones).
# 'none': Hibernate no hace nada con el esquema (para producción cuando se gestiona externamente).
# 'create': Borra y crea el esquema cada vez (¡cuidado, pierdes datos! Útil para pruebas iniciales).
# Esta propiedad también se puede establecer mediante la variable de entorno SPRING_JPA_HIBERNATE_DDL_AUTO en docker-compose.yml
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Mostrar SQL generado por Hibernate en los logs (útil para desarrollo)
spring.jpa.show-sql=true

# Formatear el SQL en los logs para mejor legibilidad
spring.jpa.properties.hibernate.format_sql=true

# =============================================
# CONFIGURACIÓN DE LOGGING
# =============================================
# Nivel de log general para tu aplicación
logging.level.com.cercademiurentals.api=DEBUG

# Nivel de log para Apache Jena
logging.level.org.apache.jena=INFO
# Cambia a DEBUG si necesitas más detalle de las operaciones de Jena

# Nivel de log para Hibernate SQL
# Muestra las sentencias SQL ejecutadas por Hibernate
logging.level.org.hibernate.SQL=DEBUG

# Nivel de log para los parámetros de las sentencias SQL de Hibernate
# Muestra los valores de los parámetros en las sentencias preparadas
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Otros niveles de log que podrían ser útiles para depurar problemas de conexión o configuración de JPA/Hibernate:
# logging.level.org.springframework.jdbc.core=DEBUG
# logging.level.org.springframework.orm.jpa=DEBUG
# logging.level.org.hibernate.stat=DEBUG # Estadísticas de Hibernate
# logging.level.org.hibernate.cfg=DEBUG # Configuración de Hibernate